buildscript {
    version = "2.0.0"
}

plugins {
    id "io.spring.dependency-management" version "1.1.0"
}

apply plugin: 'idea'
apply plugin: 'com.auth0.gradle.oss-library.java'
apply plugin: 'jacoco'

def signingKey = findProperty('signingKey')
def signingKeyPwd = findProperty('signingPassword')

signing {
    useInMemoryPgpKeys(signingKey, signingKeyPwd)
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.security:spring-security-bom:6.0.0"
    }
}

oss {
    name 'auth0-spring-security-api'
    repository 'auth0-spring-security-api'
    organization 'auth0'
    description 'Auth0 Java Spring integration for API'
    skipAssertSigningConfiguration true
    developers {
        auth0 {
            displayName = 'Auth0'
            email = 'oss@auth0.com'
        }
        lbalmaceda {
            displayName = 'Luciano Balmaceda'
            email = 'luciano.balmaceda@auth0.com'
        }
        hzalaz {
            displayName = 'Hernan Zalazar'
            email = 'hernan@auth0.com'
        }
    }
}

logger.lifecycle("Using version ${version} for ${group}.${name}")

compileJava {
    sourceCompatibility '17'
    targetCompatibility '17'
}
compileTestJava {
    sourceCompatibility '17'
    targetCompatibility '17'
}

dependencies {
    api "com.auth0:java-jwt:4.2.1"
    api "com.auth0:jwks-rsa:0.21.2"
    api "org.springframework.security:spring-security-core"
    api "org.springframework.security:spring-security-web"
    api "org.springframework.security:spring-security-config"

    implementation "commons-codec:commons-codec:1.15"
    implementation "org.slf4j:slf4j-api:2.0.5"
    compileOnly "jakarta.servlet:jakarta.servlet-api:6.0.0"

    testImplementation "junit:junit:4.13.2"
    testImplementation "org.hamcrest:hamcrest:2.2"
    testImplementation "org.mockito:mockito-core:4.9.0"
    testImplementation "jakarta.servlet:jakarta.servlet-api:6.0.0"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed', 'standardError'
        exceptionFormat 'short'
    }
}

clean.doFirst {
    new File('CHANGELOG.md.release').delete()
}

// Creates a version.txt file containing the current version of the SDK.
// This file is picked up and parsed by our Ship Orb to determine the version.
task exportVersion() {
    doLast {
        new File(rootDir, "version.txt").text = "$version"
    }
}
